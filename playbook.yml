---

- name: Setup JupyterHub
  hosts: hosts
  vars:
    users_json: "{{ lookup('file', 'users.json') | from_json }}"
  vars_prompt:
    - name: testbench_branch
      prompt: Testbench branch
      default: "master"
      private: no
  remote_user: root

  tasks:

  - name: Allow SSH, HTTP and HTTPS connections
    ansible.builtin.iptables:
      chain: INPUT
      protocol: tcp
      in_interface: eth0
      destination_ports:
        - "22"
        - "80"
        - "443"
      jump: ACCEPT

  - name: Allow related and established connections
    ansible.builtin.iptables:
      chain: INPUT
      in_interface: eth0
      ctstate: ESTABLISHED,RELATED
      jump: ACCEPT

  - name: Drop all unwanted inbound traffic
    ansible.builtin.iptables:
      chain: INPUT
      in_interface: eth0
      jump: DROP

  - name: Add admin public SSH keys
    ansible.builtin.template:
      src: keys/authorized_keys
      dest: /root/.ssh/authorized_keys
      owner: root
      group: root
      mode: '0644'
      force: yes

  - name: Update repositories
    apt:
      update_cache: yes
      cache_valid_time: 86400

  - name: Install web server
    ansible.builtin.package:
      name: nginx
      state: latest

  - name: Nginx Dashboard site configuration
    ansible.builtin.template:
      src: config/nginx/dashboard.conf
      dest: /etc/nginx/sites-available/dashboard
      owner: root
      group: root
      mode: '0644'
      force: no

  - name: Nginx Dashboard site activation
    ansible.builtin.file:
      src: /etc/nginx/sites-available/dashboard
      dest: /etc/nginx/sites-enabled/dashboard
      owner: root
      group: root
      state: link

  - name: Nginx JupyterHub site configuration
    ansible.builtin.template:
      src: config/nginx/jupyterhub.conf
      dest: /etc/nginx/sites-available/jupyter
      owner: root
      group: root
      mode: '0644'
      force: no

  - name: Nginx JupyterHub site activation
    ansible.builtin.file:
      src: /etc/nginx/sites-available/jupyter
      dest: /etc/nginx/sites-enabled/jupyter
      owner: root
      group: root
      state: link

  - name: Remove Nginx default site
    ansible.builtin.file:
      path: /etc/nginx/sites-enabled/default
      state: absent

  - name: Add Nginx htpasswd file
    ansible.builtin.template:
      src: config/nginx/.htpasswd
      dest: /etc/nginx/.htpasswd
      owner: root
      group: root
      mode: '0644'
      force: no

  - name: Install Certbot for Nginx
    ansible.builtin.package:
      name: python3-certbot-nginx
      state: latest

  - name: Configure Let's Encrypt certificate
    ansible.builtin.command:
      cmd: certbot --nginx --redirect -d jupyter.pfe.rs -d dashboard.pfe.rs --non-interactive --agree-tos -m admin@pfe.rs
      # creates: /etc/letsencrypt/live/jupyter.pfe.rs/privkey.pem

  - name: Reload Nginx
    ansible.builtin.systemd:
      name: nginx
      state: reloaded
      enabled: yes

  - name: Automatic certificate regeneration
    ansible.builtin.cron:
      name: "certbot"
      minute: "0"
      hour: "12"
      job: "/usr/bin/certbot renew --quiet"

  - name: Install Docker
    ansible.builtin.package:
      name: 
        - docker.io
        - python3-docker
      state: latest

  - name: Install Git
    ansible.builtin.package:
      name: git
      state: latest

  - name: Private SSH key
    ansible.builtin.template:
      src: keys/id_ed25519
      dest: /root/.ssh/id_ed25519
      owner: root
      group: root
      mode: '0400'
      force: no

  - name: Checkout Testbench from GitHib
    ansible.builtin.git:
      repo: git@github.com:pfe-petnica/jupyter-testbench.git
      dest: /srv/testbench
      single_branch: yes
      version: "{{ testbench_branch }}"
      key_file: /root/.ssh/id_ed25519
      accept_hostkey: yes

  - name: Install Python and pip
    ansible.builtin.package:
      name: 
        - python3
        - python3-pip
      state: latest

  - name: Install Testbench
    pip:
      executable: pip3
      name: /srv/testbench

  - name: Build Dashboard container
    community.docker.docker_image:
      name: dashboard
      build:
        path: /srv/testbench
        args:
          restart: always
      source: build

  - name: Start Dashboard container
    community.docker.docker_container:
      name: dashboard
      image: dashboard
      state: started
      ports:
      - "127.0.0.1:8002:80"
      container_default_behavior: compatibility

  - name: Install JupyterHub dependencies
    ansible.builtin.package:
      name: 
      - npm
      - nodejs
      - python3-pip
      state: latest

  - name: Install JupyterHub
    pip:
      executable: pip3
      name:
      - jupyterhub
      - notebook

  - name: Install configurable-http-proxy
    community.general.npm:
      name: configurable-http-proxy
      global: yes

  - name: Create JupyterHub root directory
    ansible.builtin.file:
      path: /srv/jupyterhub
      state: directory
      mode: '0755'

  - name: Create JupyterHub configuration directory
    ansible.builtin.file:
      path: /etc/jupyterhub
      state: directory
      mode: '0755'

  - name: JupyterHub configuration file
    ansible.builtin.template:
      src: config/jupyterhub/jupyterhub_config.py
      dest: /etc/jupyterhub/jupyterhub_config.py
      owner: root
      group: root
      mode: '0644'
      force: no

  - name: JupyterHub system service file
    ansible.builtin.template:
      src: config/systemd/jupyterhub.service
      dest: /etc/systemd/system/jupyterhub.service
      owner: root
      group: root
      mode: '0644'
      force: no

  - name: Start JupyterHub
    ansible.builtin.systemd:
      name: jupyterhub
      state: started
      enabled: yes
  
  - name: Install user creation dependencies
    ansible.builtin.package:
      name:
      - jq
      state: latest
  
  - name: Create users
    ansible.builtin.user:
      home: "/home/{{ item.username }}"
      name: "{{ item.username }}"
      password: "{{ item.password | password_hash('sha512') }}"
      shell: /sbin/nologin
      system: yes
      comment: "{{ item.name }}"
    with_items: "{{ users_json }}"

  - name: Install necessary Python libraries from Aptitude
    ansible.builtin.package:
      name:
      - libopencv-dev
      - python3-opencv
      state: latest

  - name: Copy requirements.txt temporarily for Jupyter configuration
    ansible.builtin.template:
      src: config/jupyter/requirements.txt
      dest: /tmp/jupyter-requirements.txt
      owner: root
      group: root
      mode: '0644'
      force: no

  - name: Install necessary Python libraries from PyPI
    pip:
      executable: pip3
      requirements: /tmp/jupyter-requirements.txt

  - name: Clean up temporary requirements.txt
    ansible.builtin.file:
      path: /tmp/jupyter-requirements.txt
      state: absent

  - name: Symlink dataset
    ansible.builtin.file:
      src: /srv/testbench/datasets
      dest: "/home/{{ item.username }}/dataset"
      owner: root
      group: root
      state: link
    with_items: "{{ users_json }}"

  - name: Copy dashboard.json
    ansible.builtin.template:
      src: config/testbench/dashboard.json
      dest: /etc/dashboard.json
      owner: root
      group: root
      mode: '0644'
      force: yes

  - name: Copy testbench.json
    ansible.builtin.template:
      src: config/testbench/testbench.json
      dest: /etc/testbench.json
      owner: root
      group: root
      mode: '0644'
      force: yes

  - name: Copy users.json
    ansible.builtin.template:
      src: users.json
      dest: /etc/users.json
      owner: root
      group: root
      mode: '0644'
      force: yes
